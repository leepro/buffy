name: Releasing Buffy

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build:
    # if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-18.04
    name: Building and Releasing
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0
          ref: main

      - name: Setup go
        uses: actions/setup-go@v1
        with:
          go-version: '1.17.3'

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(date +"%y%m%d")
        # run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Testing
        run: |
          go test -v ./...

      - name: Building app (linux)
        run: |
          GITHASH=`git log --format="%H" -n 1`
          NOW=`date +'%Y%m%d_%H%M%S'`
          GOVER=`go version | { read _ _ v _; echo ${v#go}; }`
          OPT="-X main.BuildVersion=${NOW}_${GITHASH}_go${GOVER}"
          GOARCH=amd64 GOOS=linux go build -ldflags "$OPT" -o ./release/buffy.${{ steps.get_version.outputs.VERSION }}.linux.amd64  main.go
          gzip --keep ./release/buffy.${{ steps.get_version.outputs.VERSION }}.linux.amd64

      - name: Building app (darwin)
        run: |
          GITHASH=`git log --format="%H" -n 1`
          NOW=`date +'%Y%m%d_%H%M%S'`
          GOVER=`go version | { read _ _ v _; echo ${v#go}; }`
          OPT="-X main.BuildVersion=${NOW}_${GITHASH}_go${GOVER}"        
          GOARCH=amd64 GOOS=darwin go build -ldflags "$OPT" -o ./release/buffy.${{ steps.get_version.outputs.VERSION }}.darwin.amd64 main.go
          gzip --keep ./release/buffy.${{ steps.get_version.outputs.VERSION }}.darwin.amd64          

      - name: Generating License File
        run: |
          wget -q https://github.com/mitchellh/golicense/releases/download/v0.2.0/golicense_0.2.0_linux_x86_64.tar.gz
          mkdir ./gl
          tar xvfz ./golicense_0.2.0_linux_x86_64.tar.gz -C ./gl
          GITHUB_TOKEN=${{ secrets.TOKEN }} ./gl/golicense ./release/buffy.${{ steps.get_version.outputs.VERSION }}.linux.amd64 | uniq -c > ./license.txt
          echo "scanned at $(date)" >> ./license.txt

      - name: Updating License File
        run: |          
          git config --local user.email "leepro@gmail.com"
          git config --local user.name "leepro"
          git config commit.gpgsign false
          git add ./license.txt || echo "ok"
          git commit -m "[auto] add license file" || echo "ok"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.TOKEN }}
          branch: refs/heads/main

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          # tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset 1
        id: upload-release-asset1 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/buffy.${{ steps.get_version.outputs.VERSION }}.darwin.amd64
          asset_name: buffy.${{ steps.get_version.outputs.VERSION }}.darwin.amd64.gzip
          asset_content_type: application/zip        

      - name: Upload Release Asset 2
        id: upload-release-asset2 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/buffy.${{ steps.get_version.outputs.VERSION }}.linux.amd64
          asset_name: buffy.${{ steps.get_version.outputs.VERSION }}.linux.amd64.gzip
          asset_content_type: application/zip        

      - name: Upload Release Asset 3
        id: upload-release-asset3 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./license.txt
          asset_name: license.txt
          asset_content_type: application/zip           
